        -:    0:Source:/home/cheg/Repos/Master/SpikeLibrary/src/timeframe.c
        -:    0:Graph:/home/cheg/Repos/Master/SpikeLibrary/cmake-build-debug/src/CMakeFiles/spike.dir/timeframe.c.gcno
        -:    0:Data:/home/cheg/Repos/Master/SpikeLibrary/cmake-build-debug/src/CMakeFiles/spike.dir/timeframe.c.gcda
        -:    0:Runs:1
        -:    1:#include "timeframe.h"
        -:    2:#include <assert.h>
        -:    3:#include <stdlib.h>
        -:    4:
        -:    5:// allocate memory
        2:    6:time_frame_t *time_frame_alloc(const double t_0, const double t_end,
        -:    7:                             const double dt) {
       2*:    8:  assert(t_end > t_0);
        2:    8-block  0
    %%%%%:    8-block  1
       2*:    9:  assert(dt < (t_end - t_0));
        2:    9-block  0
    %%%%%:    9-block  1
        -:   10:
        -:   11:  // length of time array
        2:   12:  int N = (int)((t_end - t_0) / dt);
        -:   13:  // allocate memory for time frame
        2:   14:  time_frame_t *time_frame = (time_frame_t *)malloc(
        2:   15:      sizeof(time_frame_t) + N * sizeof(double));
        -:   16:
        -:   17:  // pass parameters
        2:   18:  time_frame->t_0 = t_0;
        2:   19:  time_frame->t_end = t_end;
        2:   20:  time_frame->dt = dt;
        2:   21:  time_frame->N = N;
        -:   22:
        -:   23:  // initialize times
     1311:   24:  for (int i = 0; i < time_frame->N; i++) {
        2:   24-block  0
     1311:   24-block  1
     1309:   25:    time_frame->t[i] = t_0 + i * dt;
     1309:   25-block  0
        -:   26:  }
        -:   27:
        2:   28:  return time_frame;
        -:   29:}
        -:   30:
        1:   31:void time_frame_free(time_frame_t *time_frame) {
        1:   32:  if (time_frame != NULL) {
        1:   32-block  0
        1:   33:    free(time_frame);
        1:   33-block  0
        -:   34:  }
        1:   35:}
