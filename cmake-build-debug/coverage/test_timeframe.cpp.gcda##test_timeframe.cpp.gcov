        -:    0:Source:/home/cheg/Repos/Master/SpikeLibrary/test/test_timeframe.cpp
        -:    0:Graph:/home/cheg/Repos/Master/SpikeLibrary/cmake-build-debug/test/CMakeFiles/test_spike.dir/test_timeframe.cpp.gcno
        -:    0:Data:/home/cheg/Repos/Master/SpikeLibrary/cmake-build-debug/test/CMakeFiles/test_spike.dir/test_timeframe.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "catch.hpp"
        -:    2:#include "timeframe.h"
        -:    3:
        1:    4:TEST_CASE("Time frame allocation works correctly") {
        -:    5:  // define parameters
        1:    6:  double t_0 = 0.0;
        1:    7:  double t_end = 13.0;
        1:    8:  double dt = 1e-2;
        -:    9:
        -:   10:  // allocate time frame
        1:   11:  time_frame_t *time_frame;
        1:   12:  time_frame = time_frame_alloc(t_0, t_end, dt);
        1:   12-block  0
        -:   13:
        -:   14:  // check if parameters are set correctly
        2:   15:  REQUIRE(time_frame->t_0 == t_0);
        1:   15-block  0
        1:   15-block  1
        1:   15-block  2
        1:   15-block  3
        1:   15-block  4
    $$$$$:   15-block  5
    $$$$$:   15-block  6
    $$$$$:   15-block  7
    $$$$$:   15-block  8
    $$$$$:   15-block  9
    $$$$$:   15-block 10
    $$$$$:   15-block 11
        2:   16:  REQUIRE(time_frame->t_end == t_end);
        1:   16-block  0
        1:   16-block  1
        1:   16-block  2
        1:   16-block  3
        1:   16-block  4
    $$$$$:   16-block  5
    $$$$$:   16-block  6
    $$$$$:   16-block  7
    $$$$$:   16-block  8
    $$$$$:   16-block  9
    $$$$$:   16-block 10
    $$$$$:   16-block 11
        2:   17:  REQUIRE(time_frame->dt == dt);
        1:   17-block  0
        1:   17-block  1
        1:   17-block  2
        1:   17-block  3
        1:   17-block  4
    $$$$$:   17-block  5
    $$$$$:   17-block  6
    $$$$$:   17-block  7
    $$$$$:   17-block  8
    $$$$$:   17-block  9
    $$$$$:   17-block 10
    $$$$$:   17-block 11
        2:   18:  REQUIRE(time_frame->N == (int)((t_end - t_0) / dt));
        1:   18-block  0
        1:   18-block  1
        1:   18-block  2
        1:   18-block  3
        1:   18-block  4
    $$$$$:   18-block  5
    $$$$$:   18-block  6
    $$$$$:   18-block  7
    $$$$$:   18-block  8
    $$$$$:   18-block  9
    $$$$$:   18-block 10
    $$$$$:   18-block 11
        -:   19:
        1:   20:  time_frame_free(time_frame);
        1:   21:}
        -:   22:
        1:   23:TEST_CASE("Time frame times are calculated correctly") {
        -:   24:  // define parameters
        1:   25:  double t_0 = 1.0;
        1:   26:  double t_end = 10.0;
        1:   27:  double dt = 1.;
        -:   28:
        -:   29:  // allocate time frame
        1:   30:  time_frame_t *time_frame;
        1:   31:  time_frame = time_frame_alloc(t_0, t_end, dt);
        -:   32:
        -:   33:  // times should be 1, 2, ...
       10:   34:  for (unsigned int i = 0; i < time_frame->N; i++) {
        1:   34-block  0
       10:   34-block  1
       18:   35:    REQUIRE(time_frame->t[i] == (double) i+1);
        9:   35-block  0
        9:   35-block  1
        9:   35-block  2
        9:   35-block  3
        9:   35-block  4
        9:   35-block  5
    $$$$$:   35-block  6
    $$$$$:   35-block  7
    $$$$$:   35-block  8
    $$$$$:   35-block  9
    $$$$$:   35-block 10
    $$$$$:   35-block 11
    $$$$$:   35-block 12
        -:   36:  }
        1:   37:}
        1:   37-block  0
