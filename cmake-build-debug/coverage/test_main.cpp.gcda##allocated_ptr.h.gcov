        -:    0:Source:/usr/include/c++/9.2.1/bits/allocated_ptr.h
        -:    0:Graph:/home/cheg/Repos/Master/SpikeLibrary/cmake-build-debug/test/CMakeFiles/test_spike.dir/test_main.cpp.gcno
        -:    0:Data:/home/cheg/Repos/Master/SpikeLibrary/cmake-build-debug/test/CMakeFiles/test_spike.dir/test_main.cpp.gcda
        -:    0:Runs:1
        -:    1:// Guarded Allocation -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2014-2019 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/allocated_ptr.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{memory}
        -:   28: */
        -:   29:
        -:   30:#ifndef _ALLOCATED_PTR_H
        -:   31:#define _ALLOCATED_PTR_H 1
        -:   32:
        -:   33:#if __cplusplus < 201103L
        -:   34:# include <bits/c++0xwarning.h>
        -:   35:#else
        -:   36:# include <type_traits>
        -:   37:# include <bits/ptr_traits.h>
        -:   38:# include <bits/alloc_traits.h>
        -:   39:
        -:   40:namespace std _GLIBCXX_VISIBILITY(default)
        -:   41:{
        -:   42:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   43:
        -:   44:  /// Non-standard RAII type for managing pointers obtained from allocators.
        -:   45:  template<typename _Alloc>
        -:   46:    struct __allocated_ptr
        -:   47:    {
        -:   48:      using pointer = typename allocator_traits<_Alloc>::pointer;
        -:   49:      using value_type = typename allocator_traits<_Alloc>::value_type;
        -:   50:
        -:   51:      /// Take ownership of __ptr
      40*:   52:      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
    %%%%%:   52-block  0
    %%%%%:   52-block  1
        3:   52-block  2
        3:   52-block  3
       10:   52-block  4
    %%%%%:   52-block  5
        1:   52-block  6
        4:   52-block  7
        1:   52-block  8
        1:   52-block  9
        2:   52-block 10
    %%%%%:   52-block 11
    %%%%%:   52-block 12
    %%%%%:   52-block 13
        1:   52-block 14
        1:   52-block 15
    %%%%%:   52-block 16
    %%%%%:   52-block 17
        1:   52-block 18
        1:   52-block 19
        1:   52-block 20
        1:   52-block 21
        1:   52-block 22
        1:   52-block 23
        1:   52-block 24
        1:   52-block 25
        1:   52-block 26
        1:   52-block 27
        1:   52-block 28
        1:   52-block 29
        1:   52-block 30
    %%%%%:   52-block 31
      80*:   53:      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
    %%%%%:   53-block  0
    %%%%%:   53-block  1
    %%%%%:   53-block  2
    %%%%%:   53-block  3
        3:   53-block  4
        3:   53-block  5
       10:   53-block  6
    %%%%%:   53-block  7
        1:   53-block  8
        4:   53-block  9
        1:   53-block 10
        1:   53-block 11
        2:   53-block 12
    %%%%%:   53-block 13
    %%%%%:   53-block 14
    %%%%%:   53-block 15
        1:   53-block 16
        1:   53-block 17
    %%%%%:   53-block 18
    %%%%%:   53-block 19
        1:   53-block 20
        1:   53-block 21
        1:   53-block 22
        1:   53-block 23
        1:   53-block 24
        1:   53-block 25
        1:   53-block 26
        1:   53-block 27
        1:   53-block 28
        1:   53-block 29
        1:   53-block 30
        1:   53-block 31
        1:   53-block 32
    %%%%%:   53-block 33
    %%%%%:   53-block 34
    %%%%%:   53-block 35
    %%%%%:   53-block 36
    %%%%%:   53-block 37
        2:   53-block 38
        2:   53-block 39
        1:   53-block 40
    %%%%%:   53-block 41
        3:   53-block 42
        1:   53-block 43
        -:   54:      { }
        -:   55:
        -:   56:      /// Convert __ptr to allocator's pointer type and take ownership of it
        -:   57:      template<typename _Ptr,
        -:   58:	       typename _Req = _Require<is_same<_Ptr, value_type*>>>
        -:   59:      __allocated_ptr(_Alloc& __a, _Ptr __ptr)
        -:   60:      : _M_alloc(std::__addressof(__a)),
        -:   61:	_M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
        -:   62:      { }
        -:   63:
        -:   64:      /// Transfer ownership of the owned pointer
        -:   65:      __allocated_ptr(__allocated_ptr&& __gd) noexcept
        -:   66:      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
        -:   67:      { __gd._M_ptr = nullptr; }
        -:   68:
        -:   69:      /// Deallocate the owned pointer
      80*:   70:      ~__allocated_ptr()
        -:   71:      {
        -:   72:	if (_M_ptr != nullptr)
      80*:   73:	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
    %%%%%:   73-block  0
    %%%%%:   73-block  1
    %%%%%:   73-block  2
    $$$$$:   73-block  3
    %%%%%:   73-block  4
    $$$$$:   73-block  5
        3:   73-block  6
        3:   73-block  7
       10:   73-block  8
    %%%%%:   73-block  9
        1:   73-block 10
        4:   73-block 11
        1:   73-block 12
        1:   73-block 13
        2:   73-block 14
    %%%%%:   73-block 15
    %%%%%:   73-block 16
    %%%%%:   73-block 17
        1:   73-block 18
        1:   73-block 19
    %%%%%:   73-block 20
    %%%%%:   73-block 21
        1:   73-block 22
        1:   73-block 23
        1:   73-block 24
        1:   73-block 25
        1:   73-block 26
        1:   73-block 27
        1:   73-block 28
        1:   73-block 29
        1:   73-block 30
        1:   73-block 31
        1:   73-block 32
        1:   73-block 33
        1:   73-block 34
    %%%%%:   73-block 35
    %%%%%:   73-block 36
    $$$$$:   73-block 37
    %%%%%:   73-block 38
    $$$$$:   73-block 39
    %%%%%:   73-block 40
    $$$$$:   73-block 41
    %%%%%:   73-block 42
    $$$$$:   73-block 43
        2:   73-block 44
    $$$$$:   73-block 45
        2:   73-block 46
    $$$$$:   73-block 47
        1:   73-block 48
    $$$$$:   73-block 49
    %%%%%:   73-block 50
    $$$$$:   73-block 51
        3:   73-block 52
    $$$$$:   73-block 53
        1:   73-block 54
        -:   74:      }
        -:   75:
        -:   76:      /// Release ownership of the owned pointer
        -:   77:      __allocated_ptr&
      40*:   78:      operator=(std::nullptr_t) noexcept
        -:   79:      {
      40*:   80:	_M_ptr = nullptr;
    %%%%%:   80-block  0
    %%%%%:   80-block  1
    %%%%%:   80-block  2
    %%%%%:   80-block  3
    %%%%%:   80-block  4
    %%%%%:   80-block  5
        2:   80-block  6
        2:   80-block  7
        1:   80-block  8
    %%%%%:   80-block  9
        3:   80-block 10
        1:   80-block 11
        -:   81:	return *this;
        -:   82:      }
        -:   83:
        -:   84:      /// Get the address that the owned pointer refers to.
      40*:   85:      value_type* get() { return std::__to_address(_M_ptr); }
    %%%%%:   85-block  0
    %%%%%:   85-block  1
    %%%%%:   85-block  2
    %%%%%:   85-block  3
    %%%%%:   85-block  4
    %%%%%:   85-block  5
        2:   85-block  6
        2:   85-block  7
        1:   85-block  8
    %%%%%:   85-block  9
        3:   85-block 10
        1:   85-block 11
        -:   86:
        -:   87:    private:
        -:   88:      _Alloc* _M_alloc;
        -:   89:      pointer _M_ptr;
        -:   90:    };
        -:   91:
        -:   92:  /// Allocate space for a single object using __a
        -:   93:  template<typename _Alloc>
        -:   94:    __allocated_ptr<_Alloc>
      40*:   95:    __allocate_guarded(_Alloc& __a)
        -:   96:    {
      40*:   97:      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
    %%%%%:   97-block  0
    %%%%%:   97-block  1
    %%%%%:   97-block  2
    %%%%%:   97-block  3
    %%%%%:   97-block  4
    %%%%%:   97-block  5
    %%%%%:   97-block  6
    %%%%%:   97-block  7
    %%%%%:   97-block  8
    %%%%%:   97-block  9
    %%%%%:   97-block 10
    %%%%%:   97-block 11
    %%%%%:   97-block 12
    %%%%%:   97-block 13
        2:   97-block 14
        2:   97-block 15
        2:   97-block 16
        2:   97-block 17
        1:   97-block 18
        1:   97-block 19
    %%%%%:   97-block 20
    %%%%%:   97-block 21
        3:   97-block 22
        3:   97-block 23
        1:   97-block 24
        1:   97-block 25
        1:   97-block 26
        1:   97-block 27
        1:   97-block 28
        1:   97-block 29
        1:   97-block 30
        1:   97-block 31
        1:   97-block 32
        1:   97-block 33
        1:   97-block 34
        1:   97-block 35
        2:   97-block 36
        1:   97-block 37
        1:   97-block 38
        1:   97-block 39
       10:   97-block 40
        1:   97-block 41
        -:   98:    }
        -:   99:
        -:  100:_GLIBCXX_END_NAMESPACE_VERSION
        -:  101:} // namespace std
        -:  102:
        -:  103:#endif
        -:  104:#endif
