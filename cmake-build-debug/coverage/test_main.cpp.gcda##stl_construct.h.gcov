        -:    0:Source:/usr/include/c++/9.2.1/bits/stl_construct.h
        -:    0:Graph:/home/cheg/Repos/Master/SpikeLibrary/cmake-build-debug/test/CMakeFiles/test_spike.dir/test_main.cpp.gcno
        -:    0:Data:/home/cheg/Repos/Master/SpikeLibrary/cmake-build-debug/test/CMakeFiles/test_spike.dir/test_main.cpp.gcda
        -:    0:Runs:1
        -:    1:// nonstandard construct and destroy functions -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2019 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: *
        -:   27: * Copyright (c) 1994
        -:   28: * Hewlett-Packard Company
        -:   29: *
        -:   30: * Permission to use, copy, modify, distribute and sell this software
        -:   31: * and its documentation for any purpose is hereby granted without fee,
        -:   32: * provided that the above copyright notice appear in all copies and
        -:   33: * that both that copyright notice and this permission notice appear
        -:   34: * in supporting documentation.  Hewlett-Packard Company makes no
        -:   35: * representations about the suitability of this software for any
        -:   36: * purpose.  It is provided "as is" without express or implied warranty.
        -:   37: *
        -:   38: *
        -:   39: * Copyright (c) 1996,1997
        -:   40: * Silicon Graphics Computer Systems, Inc.
        -:   41: *
        -:   42: * Permission to use, copy, modify, distribute and sell this software
        -:   43: * and its documentation for any purpose is hereby granted without fee,
        -:   44: * provided that the above copyright notice appear in all copies and
        -:   45: * that both that copyright notice and this permission notice appear
        -:   46: * in supporting documentation.  Silicon Graphics makes no
        -:   47: * representations about the suitability of this software for any
        -:   48: * purpose.  It is provided "as is" without express or implied warranty.
        -:   49: */
        -:   50:
        -:   51:/** @file bits/stl_construct.h
        -:   52: *  This is an internal header file, included by other library headers.
        -:   53: *  Do not attempt to use it directly. @headername{memory}
        -:   54: */
        -:   55:
        -:   56:#ifndef _STL_CONSTRUCT_H
        -:   57:#define _STL_CONSTRUCT_H 1
        -:   58:
        -:   59:#include <new>
        -:   60:#include <bits/move.h>
        -:   61:#include <ext/alloc_traits.h>
        -:   62:
        -:   63:namespace std _GLIBCXX_VISIBILITY(default)
        -:   64:{
        -:   65:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   66:
        -:   67:  /**
        -:   68:   * Constructs an object in existing memory by invoking an allocated
        -:   69:   * object's constructor with an initializer.
        -:   70:   */
        -:   71:#if __cplusplus >= 201103L
        -:   72:  template<typename _T1, typename... _Args>
        -:   73:    inline void
    4418*:   74:    _Construct(_T1* __p, _Args&&... __args)
    %%%%%:   74-block  0
    %%%%%:   74-block  1
    %%%%%:   74-block  2
    %%%%%:   74-block  3
    %%%%%:   74-block  4
    %%%%%:   74-block  5
    %%%%%:   74-block  6
    %%%%%:   74-block  7
    %%%%%:   74-block  8
    %%%%%:   74-block  9
    %%%%%:   74-block 10
    %%%%%:   74-block 11
    %%%%%:   74-block 12
    %%%%%:   74-block 13
    %%%%%:   74-block 14
    %%%%%:   74-block 15
    %%%%%:   74-block 16
    %%%%%:   74-block 17
    %%%%%:   74-block 18
    %%%%%:   74-block 19
    %%%%%:   74-block 20
    %%%%%:   74-block 21
        4:   74-block 22
        4:   74-block 23
        1:   74-block 24
        1:   74-block 25
      728:   74-block 26
      728:   74-block 27
    %%%%%:   74-block 28
    %%%%%:   74-block 29
    %%%%%:   74-block 30
    %%%%%:   74-block 31
    %%%%%:   74-block 32
    %%%%%:   74-block 33
        2:   74-block 34
        2:   74-block 35
    %%%%%:   74-block 36
    %%%%%:   74-block 37
    %%%%%:   74-block 38
    %%%%%:   74-block 39
    %%%%%:   74-block 40
    %%%%%:   74-block 41
    %%%%%:   74-block 42
    %%%%%:   74-block 43
    %%%%%:   74-block 44
    %%%%%:   74-block 45
     1474:   74-block 46
     1474:   74-block 47
    %%%%%:   74-block 48
    %%%%%:   74-block 49
    %%%%%:   74-block 50
    %%%%%:   74-block 51
    %%%%%:   74-block 52
    %%%%%:   74-block 53
    %%%%%:   74-block 54
    %%%%%:   74-block 55
    %%%%%:   74-block 56
    %%%%%:   74-block 57
    %%%%%:   74-block 58
    %%%%%:   74-block 59
    2211*:   75:    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
    %%%%%:   75-block  0
    %%%%%:   75-block  1
    %%%%%:   75-block  2
    %%%%%:   75-block  3
    %%%%%:   75-block  4
    %%%%%:   75-block  5
    %%%%%:   75-block  6
    %%%%%:   75-block  7
    %%%%%:   75-block  8
    %%%%%:   75-block  9
    %%%%%:   75-block 10
    %%%%%:   75-block 11
    %%%%%:   75-block 12
    %%%%%:   75-block 13
    %%%%%:   75-block 14
    %%%%%:   75-block 15
    %%%%%:   75-block 16
        4:   75-block 17
        4:   75-block 18
        1:   75-block 19
        1:   75-block 20
      728:   75-block 21
    %%%%%:   75-block 22
    %%%%%:   75-block 23
    %%%%%:   75-block 24
        2:   75-block 25
    %%%%%:   75-block 26
    %%%%%:   75-block 27
    %%%%%:   75-block 28
    %%%%%:   75-block 29
    %%%%%:   75-block 30
    %%%%%:   75-block 31
    %%%%%:   75-block 32
    %%%%%:   75-block 33
    %%%%%:   75-block 34
    %%%%%:   75-block 35
     1474:   75-block 36
     1474:   75-block 37
     1474:   75-block 38
    %%%%%:   75-block 39
    %%%%%:   75-block 40
    %%%%%:   75-block 41
    %%%%%:   75-block 42
    %%%%%:   75-block 43
    %%%%%:   75-block 44
    %%%%%:   75-block 45
    %%%%%:   75-block 46
    %%%%%:   75-block 47
    %%%%%:   75-block 48
    %%%%%:   75-block 49
    %%%%%:   75-block 50
    %%%%%:   75-block 51
    %%%%%:   75-block 52
    %%%%%:   75-block 53
        -:   76:#else
        -:   77:  template<typename _T1, typename _T2>
        -:   78:    inline void
        -:   79:    _Construct(_T1* __p, const _T2& __value)
        -:   80:    {
        -:   81:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   82:      // 402. wrong new expression in [some_]allocator::construct
        -:   83:      ::new(static_cast<void*>(__p)) _T1(__value);
        -:   84:    }
        -:   85:#endif
        -:   86:
        -:   87:  template<typename _T1>
        -:   88:    inline void
        -:   89:    _Construct_novalue(_T1* __p)
        -:   90:    { ::new(static_cast<void*>(__p)) _T1; }
        -:   91:
        -:   92:  /**
        -:   93:   * Destroy the object pointed to by a pointer type.
        -:   94:   */
        -:   95:  template<typename _Tp>
        -:   96:    inline void
    #####:   97:    _Destroy(_Tp* __pointer)
    %%%%%:   97-block  0
    #####:   98:    { __pointer->~_Tp(); }
    %%%%%:   98-block  0
    %%%%%:   98-block  1
        -:   99:
        -:  100:  template<bool>
        -:  101:    struct _Destroy_aux
        -:  102:    {
        -:  103:      template<typename _ForwardIterator>
        -:  104:        static void
    #####:  105:        __destroy(_ForwardIterator __first, _ForwardIterator __last)
        -:  106:	{
    3581*:  107:	  for (; __first != __last; ++__first)
    $$$$$:  107-block  0
    %%%%%:  107-block  1
    $$$$$:  107-block  2
    %%%%%:  107-block  3
    %%%%%:  107-block  4
    $$$$$:  107-block  5
    $$$$$:  107-block  6
    $$$$$:  107-block  7
    $$$$$:  107-block  8
    $$$$$:  107-block  9
    %%%%%:  107-block 10
    $$$$$:  107-block 11
    $$$$$:  107-block 12
    $$$$$:  107-block 13
    $$$$$:  107-block 14
    $$$$$:  107-block 15
    $$$$$:  107-block 16
    $$$$$:  107-block 17
    $$$$$:  107-block 18
    $$$$$:  107-block 19
    $$$$$:  107-block 20
    $$$$$:  107-block 21
    $$$$$:  107-block 22
    $$$$$:  107-block 23
    %%%%%:  107-block 24
    $$$$$:  107-block 25
    %%%%%:  107-block 26
    $$$$$:  107-block 27
    %%%%%:  107-block 28
        1:  107-block 29
    %%%%%:  107-block 30
    $$$$$:  107-block 31
    %%%%%:  107-block 32
    $$$$$:  107-block 33
    %%%%%:  107-block 34
    %%%%%:  107-block 35
    %%%%%:  107-block 36
    %%%%%:  107-block 37
    %%%%%:  107-block 38
    %%%%%:  107-block 39
    %%%%%:  107-block 40
    %%%%%:  107-block 41
    %%%%%:  107-block 42
        6:  107-block 43
        1:  107-block 44
    %%%%%:  107-block 45
    %%%%%:  107-block 46
    %%%%%:  107-block 47
    %%%%%:  107-block 48
    %%%%%:  107-block 49
    %%%%%:  107-block 50
        1:  107-block 51
        1:  107-block 52
        6:  107-block 53
        1:  107-block 54
        8:  107-block 55
        1:  107-block 56
        1:  107-block 57
        1:  107-block 58
        5:  107-block 59
       61:  107-block 60
      813:  107-block 61
    %%%%%:  107-block 62
        5:  107-block 63
    %%%%%:  107-block 64
     2669:  107-block 65
    %%%%%:  107-block 66
    %%%%%:  107-block 67
    %%%%%:  107-block 68
    %%%%%:  107-block 69
    %%%%%:  107-block 70
    %%%%%:  107-block 71
    %%%%%:  107-block 72
    2360*:  108:	    std::_Destroy(std::__addressof(*__first));
    $$$$$:  108-block  0
    %%%%%:  108-block  1
    %%%%%:  108-block  2
    $$$$$:  108-block  3
    $$$$$:  108-block  4
    %%%%%:  108-block  5
    %%%%%:  108-block  6
    %%%%%:  108-block  7
    $$$$$:  108-block  8
    $$$$$:  108-block  9
    $$$$$:  108-block 10
    $$$$$:  108-block 11
    $$$$$:  108-block 12
    $$$$$:  108-block 13
    $$$$$:  108-block 14
    %%%%%:  108-block 15
    %%%%%:  108-block 16
    $$$$$:  108-block 17
    $$$$$:  108-block 18
    $$$$$:  108-block 19
    $$$$$:  108-block 20
    $$$$$:  108-block 21
    $$$$$:  108-block 22
    $$$$$:  108-block 23
    $$$$$:  108-block 24
    $$$$$:  108-block 25
    $$$$$:  108-block 26
    $$$$$:  108-block 27
    $$$$$:  108-block 28
    $$$$$:  108-block 29
    $$$$$:  108-block 30
    $$$$$:  108-block 31
    $$$$$:  108-block 32
    $$$$$:  108-block 33
    %%%%%:  108-block 34
    $$$$$:  108-block 35
    %%%%%:  108-block 36
    %%%%%:  108-block 37
    $$$$$:  108-block 38
    $$$$$:  108-block 39
    %%%%%:  108-block 40
    %%%%%:  108-block 41
    %%%%%:  108-block 42
    %%%%%:  108-block 43
    $$$$$:  108-block 44
    %%%%%:  108-block 45
    $$$$$:  108-block 46
    %%%%%:  108-block 47
    %%%%%:  108-block 48
    %%%%%:  108-block 49
    %%%%%:  108-block 50
    %%%%%:  108-block 51
    %%%%%:  108-block 52
    %%%%%:  108-block 53
    %%%%%:  108-block 54
    %%%%%:  108-block 55
    %%%%%:  108-block 56
    %%%%%:  108-block 57
    %%%%%:  108-block 58
    %%%%%:  108-block 59
    %%%%%:  108-block 60
        4:  108-block 61
        4:  108-block 62
    %%%%%:  108-block 63
    %%%%%:  108-block 64
    %%%%%:  108-block 65
    %%%%%:  108-block 66
    %%%%%:  108-block 67
    %%%%%:  108-block 68
    %%%%%:  108-block 69
    %%%%%:  108-block 70
    %%%%%:  108-block 71
    %%%%%:  108-block 72
    %%%%%:  108-block 73
        2:  108-block 74
        2:  108-block 75
    %%%%%:  108-block 76
    %%%%%:  108-block 77
        4:  108-block 78
    %%%%%:  108-block 79
    %%%%%:  108-block 80
    %%%%%:  108-block 81
    %%%%%:  108-block 82
    %%%%%:  108-block 83
    %%%%%:  108-block 84
        2:  108-block 85
      754:  108-block 86
    %%%%%:  108-block 87
    %%%%%:  108-block 88
    %%%%%:  108-block 89
    %%%%%:  108-block 90
     1519:  108-block 91
     1519:  108-block 92
    %%%%%:  108-block 93
    %%%%%:  108-block 94
    %%%%%:  108-block 95
    %%%%%:  108-block 96
    %%%%%:  108-block 97
    %%%%%:  108-block 98
    %%%%%:  108-block 99
        -:  109:	}
        -:  110:    };
        -:  111:
        -:  112:  template<>
        -:  113:    struct _Destroy_aux<true>
        -:  114:    {
        -:  115:      template<typename _ForwardIterator>
        -:  116:        static void
       3*:  117:        __destroy(_ForwardIterator, _ForwardIterator) { }
        -:  118:    };
        -:  119:
        -:  120:  /**
        -:  121:   * Destroy a range of objects.  If the value_type of the object has
        -:  122:   * a trivial destructor, the compiler should optimize all of this
        -:  123:   * away, otherwise the objects' destructors must be invoked.
        -:  124:   */
        -:  125:  template<typename _ForwardIterator>
        -:  126:    inline void
    #####:  127:    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    $$$$$:  127-block  0
    $$$$$:  127-block  1
    $$$$$:  127-block  2
    $$$$$:  127-block  3
    $$$$$:  127-block  4
    $$$$$:  127-block  5
    $$$$$:  127-block  6
    $$$$$:  127-block  7
    $$$$$:  127-block  8
    $$$$$:  127-block  9
    $$$$$:  127-block 10
    $$$$$:  127-block 11
    $$$$$:  127-block 12
    $$$$$:  127-block 13
    $$$$$:  127-block 14
    $$$$$:  127-block 15
    $$$$$:  127-block 16
    $$$$$:  127-block 17
    $$$$$:  127-block 18
        -:  128:    {
        -:  129:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  130:                       _Value_type;
        -:  131:#if __cplusplus >= 201103L
        -:  132:      // A deleted destructor is trivial, this ensures we reject such types:
        -:  133:      static_assert(is_destructible<_Value_type>::value,
        -:  134:		    "value type is destructible");
        -:  135:#endif
        -:  136:      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
    #####:  137:	__destroy(__first, __last);
    $$$$$:  137-block  0
    $$$$$:  137-block  1
    $$$$$:  137-block  2
    $$$$$:  137-block  3
    $$$$$:  137-block  4
    $$$$$:  137-block  5
    $$$$$:  137-block  6
    $$$$$:  137-block  7
    $$$$$:  137-block  8
    $$$$$:  137-block  9
    $$$$$:  137-block 10
    $$$$$:  137-block 11
    $$$$$:  137-block 12
    $$$$$:  137-block 13
    $$$$$:  137-block 14
    $$$$$:  137-block 15
    $$$$$:  137-block 16
    $$$$$:  137-block 17
    $$$$$:  137-block 18
        -:  138:    }
        -:  139:
        -:  140:  template<bool>
        -:  141:    struct _Destroy_n_aux
        -:  142:    {
        -:  143:      template<typename _ForwardIterator, typename _Size>
        -:  144:        static _ForwardIterator
        -:  145:        __destroy_n(_ForwardIterator __first, _Size __count)
        -:  146:	{
        -:  147:	  for (; __count > 0; (void)++__first, --__count)
        -:  148:	    std::_Destroy(std::__addressof(*__first));
        -:  149:	  return __first;
        -:  150:	}
        -:  151:    };
        -:  152:
        -:  153:  template<>
        -:  154:    struct _Destroy_n_aux<true>
        -:  155:    {
        -:  156:      template<typename _ForwardIterator, typename _Size>
        -:  157:        static _ForwardIterator
        -:  158:        __destroy_n(_ForwardIterator __first, _Size __count)
        -:  159:	{
        -:  160:	  std::advance(__first, __count);
        -:  161:	  return __first;
        -:  162:	}
        -:  163:    };
        -:  164:
        -:  165:  /**
        -:  166:   * Destroy a range of objects.  If the value_type of the object has
        -:  167:   * a trivial destructor, the compiler should optimize all of this
        -:  168:   * away, otherwise the objects' destructors must be invoked.
        -:  169:   */
        -:  170:  template<typename _ForwardIterator, typename _Size>
        -:  171:    inline _ForwardIterator
        -:  172:    _Destroy_n(_ForwardIterator __first, _Size __count)
        -:  173:    {
        -:  174:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  175:                       _Value_type;
        -:  176:#if __cplusplus >= 201103L
        -:  177:      // A deleted destructor is trivial, this ensures we reject such types:
        -:  178:      static_assert(is_destructible<_Value_type>::value,
        -:  179:		    "value type is destructible");
        -:  180:#endif
        -:  181:      return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
        -:  182:	__destroy_n(__first, __count);
        -:  183:    }
        -:  184:
        -:  185:  /**
        -:  186:   * Destroy a range of objects using the supplied allocator.  For
        -:  187:   * nondefault allocators we do not optimize away invocation of 
        -:  188:   * destroy() even if _Tp has a trivial destructor.
        -:  189:   */
        -:  190:
        -:  191:  template<typename _ForwardIterator, typename _Allocator>
        -:  192:    void
        -:  193:    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
        -:  194:	     _Allocator& __alloc)
        -:  195:    {
        -:  196:      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
        -:  197:      for (; __first != __last; ++__first)
        -:  198:	__traits::destroy(__alloc, std::__addressof(*__first));
        -:  199:    }
        -:  200:
        -:  201:  template<typename _ForwardIterator, typename _Tp>
        -:  202:    inline void
    1296*:  203:    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    %%%%%:  203-block  0
    %%%%%:  203-block  1
    %%%%%:  203-block  2
    %%%%%:  203-block  3
    $$$$$:  203-block  4
    %%%%%:  203-block  5
        1:  203-block  6
    $$$$$:  203-block  7
    %%%%%:  203-block  8
    %%%%%:  203-block  9
    %%%%%:  203-block 10
    %%%%%:  203-block 11
    %%%%%:  203-block 12
    %%%%%:  203-block 13
    %%%%%:  203-block 14
    %%%%%:  203-block 15
    %%%%%:  203-block 16
        2:  203-block 17
        1:  203-block 18
    %%%%%:  203-block 19
        1:  203-block 20
        1:  203-block 21
        4:  203-block 22
        1:  203-block 23
        4:  203-block 24
        1:  203-block 25
        1:  203-block 26
        1:  203-block 27
        5:  203-block 28
       59:  203-block 29
       59:  203-block 30
    %%%%%:  203-block 31
        5:  203-block 32
    %%%%%:  203-block 33
     1150:  203-block 34
        -:  204:	     allocator<_Tp>&)
        -:  205:    {
    1299*:  206:      _Destroy(__first, __last);
    %%%%%:  206-block  0
    %%%%%:  206-block  1
    $$$$$:  206-block  2
    %%%%%:  206-block  3
    %%%%%:  206-block  4
    $$$$$:  206-block  5
    $$$$$:  206-block  6
    %%%%%:  206-block  7
    %%%%%:  206-block  8
    $$$$$:  206-block  9
    $$$$$:  206-block 10
    %%%%%:  206-block 11
    $$$$$:  206-block 12
    %%%%%:  206-block 13
    %%%%%:  206-block 14
    %%%%%:  206-block 15
    $$$$$:  206-block 16
    %%%%%:  206-block 17
    %%%%%:  206-block 18
    $$$$$:  206-block 19
    $$$$$:  206-block 20
    %%%%%:  206-block 21
    $$$$$:  206-block 22
    $$$$$:  206-block 23
    %%%%%:  206-block 24
    $$$$$:  206-block 25
    %%%%%:  206-block 26
        1:  206-block 27
    %%%%%:  206-block 28
    $$$$$:  206-block 29
    $$$$$:  206-block 30
    $$$$$:  206-block 31
    %%%%%:  206-block 32
    $$$$$:  206-block 33
    %%%%%:  206-block 34
    $$$$$:  206-block 35
    %%%%%:  206-block 36
    $$$$$:  206-block 37
    $$$$$:  206-block 38
    $$$$$:  206-block 39
    $$$$$:  206-block 40
    $$$$$:  206-block 41
    $$$$$:  206-block 42
    %%%%%:  206-block 43
    %%%%%:  206-block 44
    %%%%%:  206-block 45
    %%%%%:  206-block 46
    %%%%%:  206-block 47
    %%%%%:  206-block 48
    %%%%%:  206-block 49
    %%%%%:  206-block 50
        2:  206-block 51
        1:  206-block 52
    %%%%%:  206-block 53
    %%%%%:  206-block 54
    %%%%%:  206-block 55
    %%%%%:  206-block 56
    %%%%%:  206-block 57
    %%%%%:  206-block 58
    %%%%%:  206-block 59
    %%%%%:  206-block 60
        1:  206-block 61
        1:  206-block 62
        4:  206-block 63
        1:  206-block 64
        4:  206-block 65
        1:  206-block 66
        1:  206-block 67
        1:  206-block 68
        5:  206-block 69
       59:  206-block 70
       59:  206-block 71
    %%%%%:  206-block 72
        5:  206-block 73
    %%%%%:  206-block 74
     1150:  206-block 75
    %%%%%:  206-block 76
        2:  206-block 77
    %%%%%:  206-block 78
    %%%%%:  206-block 79
    %%%%%:  206-block 80
    %%%%%:  206-block 81
    %%%%%:  206-block 82
    %%%%%:  206-block 83
    %%%%%:  206-block 84
        1:  206-block 85
    $$$$$:  206-block 86
    %%%%%:  206-block 87
    %%%%%:  206-block 88
    $$$$$:  206-block 89
    $$$$$:  206-block 90
    $$$$$:  206-block 91
    $$$$$:  206-block 92
        -:  207:    }
        -:  208:
        -:  209:#if __cplusplus > 201402L
        -:  210:  template <typename _Tp>
        -:  211:    inline void
        -:  212:    destroy_at(_Tp* __location)
        -:  213:    {
        -:  214:      std::_Destroy(__location);
        -:  215:    }
        -:  216:
        -:  217:  template <typename _ForwardIterator>
        -:  218:    inline void
        -:  219:    destroy(_ForwardIterator __first, _ForwardIterator __last)
        -:  220:    {
        -:  221:      std::_Destroy(__first, __last);
        -:  222:    }
        -:  223:
        -:  224:  template <typename _ForwardIterator, typename _Size>
        -:  225:    inline _ForwardIterator
        -:  226:    destroy_n(_ForwardIterator __first, _Size __count)
        -:  227:    {
        -:  228:      return std::_Destroy_n(__first, __count);
        -:  229:    }
        -:  230:#endif
        -:  231:
        -:  232:_GLIBCXX_END_NAMESPACE_VERSION
        -:  233:} // namespace std
        -:  234:
        -:  235:#endif /* _STL_CONSTRUCT_H */
        -:  236:
