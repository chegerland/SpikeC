        -:    0:Source:/home/cheg/Repos/Master/SpikeLibrary/src/signals.c
        -:    0:Graph:/home/cheg/Repos/Master/SpikeLibrary/cmake-build-debug/src/CMakeFiles/spike.dir/signals.c.gcno
        -:    0:Data:/home/cheg/Repos/Master/SpikeLibrary/cmake-build-debug/src/CMakeFiles/spike.dir/signals.c.gcda
        -:    0:Runs:1
        -:    1:#include "signals.h"
        -:    2:#include <math.h>
        -:    3:
        -:    4:// generate cosine signal
    #####:    5:void cosine_signal(const double alpha, const double f, const time_frame_t *time_frame,
        -:    6:                   double *signal) {
    #####:    7:  for (int i = 0; i < time_frame->N; i++) {
    %%%%%:    7-block  0
    %%%%%:    7-block  1
    #####:    8:    signal[i] = alpha * cos(2.0 * M_PI * f * time_frame->t[i]);
    %%%%%:    8-block  0
        -:    9:  }
    #####:   10:}
        -:   11:
        -:   12:// generate a step signal
    #####:   13:void step_signal(const double alpha, const double t_0, const time_frame_t *time_frame,
        -:   14:                 double *signal) {
    #####:   15:  for (int i = 0; i < time_frame->N; i++) {
    %%%%%:   15-block  0
    %%%%%:   15-block  1
    %%%%%:   15-block  2
    #####:   16:    if (time_frame->t[i] < t_0) {
    %%%%%:   16-block  0
    #####:   17:      signal[i] = 0.;
    %%%%%:   17-block  0
        -:   18:    } else {
    #####:   19:      signal[i] = alpha;
    %%%%%:   19-block  0
        -:   20:    }
        -:   21:  }
    #####:   22:}
        -:   23:
        -:   24:// generate a two cosine signal
    #####:   25:void two_cosine_signal(const double alpha, const double f1, const double beta, const double f2,
        -:   26:                       const double phi, const time_frame_t *time_frame,
        -:   27:                       double *signal) {
    #####:   28:  for (int i = 0; i < time_frame->N; i++) {
    %%%%%:   28-block  0
    %%%%%:   28-block  1
    #####:   29:    signal[i] = alpha * cos(2.0 * M_PI * f1 * time_frame->t[i]) +
    #####:   30:                beta * cos(2.0 * M_PI * f2 * time_frame->t[i] + phi);
    %%%%%:   30-block  0
        -:   31:  }
    #####:   32:}
