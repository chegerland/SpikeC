        -:    0:Source:/home/cheg/Repos/Master/SpikeLibrary/src/statistics.c
        -:    0:Graph:/home/cheg/Repos/Master/SpikeLibrary/cmake-build-debug/src/CMakeFiles/spike.dir/statistics.c.gcno
        -:    0:Data:/home/cheg/Repos/Master/SpikeLibrary/cmake-build-debug/src/CMakeFiles/spike.dir/statistics.c.gcda
        -:    0:Runs:1
        -:    1:#include "statistics.h"
        -:    2:#include <assert.h>
        -:    3:#include <stdlib.h>
        -:    4:
        -:    5:// count number of spikes
    #####:    6:int spike_count(const spike_train_t *spike_train) {
    #####:    7:  int count = 0;
        -:    8:
        -:    9:  // increase count for every spike in the spike train
    #####:   10:  for (int i = 0; i < spike_train->length; i++) {
    %%%%%:   10-block  0
    %%%%%:   10-block  1
    %%%%%:   10-block  2
    #####:   11:    if (spike_train->data[i] == true) {
    %%%%%:   11-block  0
    #####:   12:      count++;
    %%%%%:   12-block  0
        -:   13:    }
        -:   14:  }
        -:   15:
    #####:   16:  return count;
        -:   17:}
        -:   18:
        -:   19:// calculate spike times
    #####:   20:int spike_times(double *times, const spike_train_t *spike_train,
        -:   21:                const time_frame_t *time_frame) {
        -:   22:
    #####:   23:  assert(spike_train->length == time_frame->N);
    %%%%%:   23-block  0
    %%%%%:   23-block  1
        -:   24:
        -:   25:  // get the number of spikes
    #####:   26:  int number_of_spikes = spike_count(spike_train);
    %%%%%:   26-block  0
        -:   27:
        -:   28:  // give spike times array the right size
    #####:   29:  times = (double *)realloc(times, sizeof(double) * number_of_spikes);
        -:   30:
        -:   31:  // add corresponding time to spike times array
    #####:   32:  int count = 0;
    #####:   33:  for (int i = 0; i < spike_train->length; i++) {
    %%%%%:   33-block  0
    %%%%%:   33-block  1
    #####:   34:    if (spike_train->data[i] == true) {
    %%%%%:   34-block  0
    #####:   35:      times[count] = time_frame->t[i];
    #####:   36:      count++;
    %%%%%:   36-block  0
        -:   37:    }
        -:   38:  }
        -:   39:
    #####:   40:  return count;
        -:   41:}
        -:   42:
        -:   43:// add spike train to firing rate
    #####:   44:void add_to_firing_rate(double *firing_rate, int N,
        -:   45:                        const spike_train_t *spike_train,
        -:   46:                        const time_frame_t *time_frame) {
        -:   47:
        -:   48:  // add to firing rate
    #####:   49:  for (int i = 0; i < spike_train->length; i++) {
    %%%%%:   49-block  0
    %%%%%:   49-block  1
    %%%%%:   49-block  2
    #####:   50:    if (spike_train->data[i] == true) {
    %%%%%:   50-block  0
    #####:   51:      firing_rate[i] += 1. / ((double)N * time_frame->dt);
    %%%%%:   51-block  0
        -:   52:    }
        -:   53:  }
    #####:   54:}
